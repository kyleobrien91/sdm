#!/usr/bin/env python3
#
# sdm-cportal implements a Captive Portal hotspot to obtain WiFi SSD and Password from the user
#
# If the system has 1 WiFi adapter, the WiFi must switch away from AP mode to test the WiFi settings
#   This means that the user's client device will disconnect from the hotspot and will need to be reconnected
#   in order to get the results and complete the WiFi settings.
#
# If the system has 2 WiFi adapters they will both be used, so the user's client device will not disconnect
#
import argparse
import datetime
import os
import shutil
import subprocess
import time
from functools    import partial
from http.server  import HTTPServer
from http.server  import BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

class htcontrol:
    def __init__(self):
        self.sdm = self.stopflag = self.internet = self.connected = self.iconnected = False
        self.inprogress = self.dual = self.validate = self.debug = False
        self.wificountry = self.keymap = self.locale = self.timezone = self.allerrors = self.myip = ""
        self.apssid = self.ssid = self.password = self.wlan = self.logmsg = self.facname = ""
        self.l10nhandler = ""
        self.dhcpwait = 0

web_form = """
  <html><body>
  <h1>WiFi Configuration</h1>
<br>
<form action="/formsubmit">
    <table>
      <tr><td>SSID*</td><td><input type="text" name="ssid" value=""></td></tr>
      <tr><td>Password*</td><td><input type="text" name="password" value=""></td></tr>
      <tr><td>WiFi Country*</td><td><input type="text" name="wificountry" value=""></td></tr>
      <tr><td>Keymap</td><td><input type="text" name="keymap" value=""></td></tr>
      <tr><td>Locale</td><td><input type="text" name="locale" value=""></td></tr>
      <tr><td>Timezone</td><td><input type="text" name="timezone" value=""></td></tr>
      <tr><td>DHCPWait</td><td><input type="text" name="dhcpwait" value=""></td></tr>
    </table><p>
    <input type="submit" value="Submit">
  <div>
     <input type="checkbox" id="validate" checked name="validate">
    <label for="validate">Validate WiFi Configuration by Connecting</label>
  </div>
  <div>
     <input type="checkbox" id="ckinternet" checked name="ckinternet">
    <label for="validate">Check Internet Connectivity after WiFi Connected</label>
  </div>
  </form>
*  Entry is Required
  </body></html>
"""

greeting_page = """
  <html><body>
  <h1>Captive Portal</h1>
<h2>This is a Semi-Automatic WiFi Configuration Portal. Follow these steps to configure your WiFi:</h2>
<ul>
<li>Click on the first link below. It will open a new browser page with a form to fill out</li>
<li>After you fill out the form, click Submit and wait about 30 seconds</li>
<li>Reconnect to the Captive Portal WiFi Network using the Settings App on your device</li>
<li>Click on the second link below to check the connection status and complete the WiFi configuration</li>
<li>IMPORTANT: The system configuration will not complete until you get a successful response from the second link below</li>
</ul>
<ul>
<li><a href="http://{}/webform" target="_blank">Start the captive portal</a></li>
<br><br>
Use the Settings App on your device to make sure you're connected to the Captive Portal WiFi Network again before clicking this link
<li><a href="http://{}/final" target="_blank">Check WiFi connection status</a></li>
</ul>
  </body></html>
"""

working_page = """
  <html><body>
  <h3>Your inputs have been validated</h3>
  <h3>Testing your WiFi Configuration...Please wait</h3>
<br>
If your device loses Captive Portal WiFi Netork connectivity:
<ul>
<li>Wait 30 seconds</li>
<li>Reconnect to the Captive Portal WiFi Network</li>
<li>Navigate to:
</ul>
<br>
<a href="http://{}/final">Check WiFi connection status</a>
<script type="text/javascript">
location.href = "http://{}/testinputs"
</script>
  </body></html>
"""

notValidated = """
<html><body>
<h1>WiFi Configuration Completed...</h1>
<h2>WiFi Connection NOT Tested</h2>
</body></html>
"""

def qdelfile(fn):
    try:
        os.remove(fn)
    except OSError:
        pass

def qrename(src, dst):
    try:
        os.rename(src, dst)
    except OSError:
        pass

def qcopyfile(src, dst):
    """
    Copy src file to dst
    """
    try:
        shutil.copy(src, dst)
    except OSError:
        pass
    return

def nowtime():
    return datetime.datetime.strftime(datetime.datetime.now(), "%Y-%m-%d %H:%M:%S")  

def logmsg(pd, msg):
    if pd.logmsg != "":
        tfcmd(f'{pd.logmsg} "{msg}"')
    tfcmd(f'echo {nowtime()} FirstBoot: "{msg}" > /dev/console')
    if pd.debug:
        print(f"{nowtime()} {msg}")

def tfcmd(docmd):
    #
    # Returns return status from the command
    #
    r = subprocess.run(docmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    return r.returncode == 0
    
def gocmd(docmd):
    #
    # Returns stdout from the command
    #
    r = subprocess.run(docmd, stdout=subprocess.PIPE, stderr=None, shell=True)
    return r.stdout.decode('utf-8')
    
def stopifactive(pd, service, logit):
    active = gocmd(f"systemctl show -p ActiveState {service} --value").rstrip()
    if active == "active":
        if logit:
            logmsg(pd, f"Stopping service '{service}'")
        tfcmd(f"systemctl stop {service}")

def getmyipaddr(pd):
    for s in gocmd("ip -o -f inet addr show").split("\n"):
        if 'wlan0' in s:
            s1 = ' '.join(s.split())
            w = s1.split(' ')
            return w[3].split('/')[0]
    return ""

def iponline(ipaddr):
    return tfcmd(f"ping -c 1 -W 1 {ipaddr}")

def apon(pd):
    logmsg(pd, f"Enable Access Point for SSID '{pd.apssid}' on {pd.wlan}")
    stopifactive(pd, f"wpa_supplicant@{pd.wlan}", False)
    qdelfile(f"/etc/wpa_supplicant/wpa_supplicant-{pd.wlan}.conf")
    qcopyfile(
        f"/etc/wpa_supplicant/{pd.facname}-ap-wpa_supplicant.conf",
        f"/etc/wpa_supplicant/wpa_supplicant-{pd.wlan}.conf",
    )
    if not pd.dual:
        qdelfile(f"/etc/systemd/network/11-{pd.facname}-wlan0.network")
        with open(f"/etc/systemd/network/11-{pd.facname}-wlan0-AP.network", 'w') as f:
            f.write("[Match]\n\
Name={}\n\
\n\
[Network]\n\
DHCPServer=yes\n\
Address={}/24\n\
\n\
[DHCPServer]\n\
DNS={}\n".format(pd.wlan, pd.ip, pd.ip))
    tfcmd("systemctl daemon-reload")
    logmsg(
        pd,
        f"Start Access Point services systemd-networkd and wpa_supplicant@{pd.wlan}",
    )
    tfcmd("systemctl restart systemd-networkd")
    tfcmd(f"systemctl start wpa_supplicant@{pd.wlan}")

def aponifsingle(pd):
    if not pd.dual: apon(pd)

def writewpaconf(pd):
    with open(f"/etc/wpa_supplicant/{pd.facname}-wpa-supplicant.conf", 'w') as f:
        f.write('ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n\
country={}\n\
\n\
network={{\n\
    ssid="{}"\n\
    psk="{}"\n\
    key_mgmt=WPA-PSK\n}}\n'.format(pd.wificountry, pd.ssid, pd.password))

def wifion(pd):
    if not pd.dual: logmsg(pd, "Disable Access Point on wlan0")
    stopifactive(pd, "wpa_supplicant@wlan0", False)
    qdelfile("/etc/wpa_supplicant/wpa_supplicant.conf-wlan0")
    qcopyfile(
        f"/etc/wpa_supplicant/{pd.facname}-wpa-supplicant.conf",
        "/etc/wpa_supplicant/wpa_supplicant-wlan0.conf",
    )
    if not pd.dual:
        qdelfile(f"/etc/systemd/network/11-{pd.facname}-wlan0-AP.network")
    with open(f"/etc/systemd/network/11-{pd.facname}-wlan0.network", 'w') as f:
        f.write('[Match]\nName=wlan0\n\n[Network]\nDHCP=yes\n\n')
    logmsg(pd, f"Enable WiFi on wlan0 for SSID '{pd.ssid}'")
    tfcmd("systemctl daemon-reload")
    tfcmd("systemctl restart systemd-networkd")
    tfcmd("systemctl start wpa_supplicant@wlan0")

def writel10n(pd, keymap, locale, timezone):
    ostr = f"keymap={keymap}" if keymap != "" else ""
    if locale != "":
        ostr = f"{ostr}\nlocale={locale}"
    if timezone != "":
        ostr = f"{ostr}\ntimezone={timezone}"
    if ostr != "":
        if pd.sdm:
            with open(f"/etc/{pd.facname}/local-1piboot.conf", 'w') as f:
                f.write(f"{ostr}\n")
        elif pd.l10nhandler != "":
            tfcmd(f'{pd.l10nhandler} "{keymap}" "{locale}" "{timezone}"')

class sdmRequestHandler(BaseHTTPRequestHandler):
    def __init__(self, pd, *args, **kwargs):
        self.pd = pd
        super().__init__(*args, **kwargs)

    def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        return
        
    def log_message(self, *args, **kwargs):
        # Prevents debug output from going to stderr 
        return

    def _adderror(self, oldstring, newstring):
        return newstring if oldstring == "" else f"{oldstring}<br>{newstring}"

    def _buildresponse(self, pd):
        response = "<html><body><h1>WiFi Setup Results</h1>"
        if self.pd.connected:
            response = f"{response}<h2>Obtained IP Address {self.pd.myip} via WiFi SSID '{self.pd.ssid}'<br></h2>"
        else:
            response = f"{response}<h2>WiFi Did NOT Connect Successfully</h2>"
        if self.pd.iconnected:
            response = f"{response}<h2>Internet IS Accessible</h2>"
        elif self.pd.internet:
            response = f"{response}<h2>Internet is NOT Accessible</h2>"
        else:
            response = f"{response}<h2>Internet Accessibility was not tested</h2>"
        return f"{response}</body></html>"

    def _write_response(self, htmltext):
        self._set_response()
        return self.wfile.write(htmltext.encode('utf-8'))
    
    def _setstop(self, pd, dostop):
        writel10n(pd, self.pd.keymap, self.pd.locale, self.pd.timezone)
        if self.pd.dual or dostop: self.pd.stopflag = True

    def do_GET(self):
        if "/formsubmit" in self.path:
            query_items = parse_qs(urlparse(self.path).query, keep_blank_values=True)
            self.pd.ssid = query_items['ssid'][0].strip()
            self.pd.password = query_items['password'][0].strip()
            self.pd.wificountry = query_items['wificountry'][0].upper()
            self.pd.keymap = query_items['keymap'][0].lower().strip()
            self.pd.locale = query_items['locale'][0].strip()
            self.pd.timezone = query_items['timezone'][0].strip()
            self.pd.dhcpwait = query_items['dhcpwait'][0].strip()
            if 'validate' in query_items: self.pd.validate = True
            if 'ckinternet' in query_items: self.pd.internet = True
            #
            # Validate inputs
            #
            self.pd.allerrors = ""
            if self.pd.ssid == "":
                self.pd.allerrors = self._adderror(self.pd.allerrors, "SSID cannot be blank")
            if self.pd.password == "":
                self.pd.allerrors = self._adderror(self.pd.allerrors, "Password cannot be blank")
            if self.pd.keymap != "":
                if not tfcmd(
                    f'grep "^  {self.pd.keymap} " /usr/share/doc/keyboard-configuration/xorg.lst'
                ):
                    self.pd.allerrors = self._adderror(
                        self.pd.allerrors,
                        f"Unrecognized keymap '{self.pd.keymap}'",
                    )
            if self.pd.locale != "":
                if not tfcmd(
                    f'grep "^{self.pd.locale}" /usr/share/i18n/SUPPORTED'
                ):
                    self.pd.allerrors = self._adderror(
                        self.pd.allerrors,
                        f"Unrecognized locale '{self.pd.locale}'",
                    )
            if self.pd.wificountry != "":
                if not tfcmd(
                    f'grep "^{self.pd.wificountry}" /usr/share/zoneinfo/iso3166.tab'
                ):
                    self.pd.allerrors = self._adderror(
                        self.pd.allerrors,
                        f"Unrecognized WiFi Country '{self.pd.wificountry}'",
                    )
            if self.pd.timezone != "":
                if not os.path.isfile(f"/usr/share/zoneinfo/{self.pd.timezone}"):
                    self.pd.allerrors = self._adderror(
                        self.pd.allerrors,
                        f"Unrecognized Timezone '{self.pd.timezone}'",
                    )
            if self.pd.dhcpwait != "":
                try:
                    dwait = self.pd.dhcpwait
                    self.pd.dhcpwait = int(dwait)
                except:
                    self.pd.allerrors = self._adderror(
                        self.pd.allerrors,
                        f"dhcpwait value '{dwait}' is not numeric",
                    )
            else:
                self.pd.dhcpwait = 15
            if self.pd.allerrors != "":
                self.pd.allerrors = f"<html><body><h1>Errors Found</h1><h2>{self.pd.allerrors}</h2></body></html>"
                self._write_response(self.pd.allerrors)
            elif self.pd.validate:
                self._write_response(working_page.format(self.pd.ip, self.pd.ip))
            else:
                logmsg(pd, "Write WiFi configuration with No Validation")
                writewpaconf(pd)
                self._write_response(notValidated)
                self._setstop(pd, True)
                return
        elif self.path == "/" or "/hotspot-detect.html" in self.path:
            self._write_response(greeting_page.format(self.pd.ip, self.pd.ip))
        elif self.path == "/webform":
            self._write_response(web_form)
        elif self.path == "/testinputs":
            #
            # Have the user inputs. Process the WiFi configuration
            #
            self.pd.inprogress = True
            time.sleep(1)
            writewpaconf(pd)
            wifion(self.pd)
            # Wait for the network to come online
            for _ in range(1, self.pd.dhcpwait):
                myipaddr = getmyipaddr(self.pd)
                if myipaddr != "" and not myipaddr.startswith("169.254"): break
                logmsg(pd, "Waiting for wlan0 to obtain an IP address")
                time.sleep(1)
            # get my ip address and error if it didn't connect
            myipaddr = getmyipaddr(self.pd)
            logmsg(pd, f"Obtained IP Address {myipaddr}")
            if myipaddr == "" or myipaddr.startswith("169.254"):
                logmsg(pd, "Failed to obtain an IP Address")
                aponifsingle(self.pd)
                self._write_response(self._buildresponse(pd))
                self.pd.inprogress = False
                return
            self.pd.connected = True
            self.pd.myip = myipaddr
            if self.pd.internet:
                if not iponline("1.1.1.1"):
                    logmsg(pd, "Internet is Not Accessible")
                    aponifsingle(self.pd)
                    self._write_response(self._buildresponse(pd))
                    self.pd.inprogress = False
                else:
                    logmsg(pd, "Internet is Accessible")
                    self.pd.iconnected = True
                    aponifsingle(self.pd)
                    self._write_response(self._buildresponse(pd))
                    self.pd.inprogress = False
                    self._setstop(pd, False)
            else:
                logmsg(pd, "WiFi Operational, no Internet check done")
                aponifsingle(self.pd)
                self._write_response(self._buildresponse(pd))
                self.pd.inprogress = False
                self._setstop(pd, False)
        elif self.path == "/final":
#            if self.pd.inprogress:
#                self._write_response(working2_page)
#                return
#            else:
            if self.pd.connected:
                self._setstop(pd, True)
            self._write_response(self._buildresponse(pd))
        return

def cleanup(pd):
    for fn in [f"11-{pd.facname}-wlan0-AP.network", f"11-{pd.facname}-wlan0.network", f"12-{pd.facname}-wlan1-AP.network"]:
        qdelfile(f"/etc/systemd/network/.{fn}")
        qrename(f"/etc/systemd/network/{fn}", f"/etc/systemd/network/.{fn}")
    for wl in [ 'wlan0', 'wlan1' ]:
        qdelfile(f"/etc/wpa_supplicant/wpa_supplicant-{wl}.conf")
    # Set the final WPA config file for use
    qcopyfile(
        f"/etc/wpa_supplicant/{pd.facname}-wpa-supplicant.conf",
        "/etc/wpa_supplicant/wpa_supplicant.conf",
    )

def runserver(pd):
    # Configure the network as we need it
    stopifactive(pd, "dhcpcd", True)
    for wl in [ 'wlan0', 'wlan1' ]:
        stopifactive(pd, f"wpa_supplicant@{wl}", True)
    apon(pd)
    server_address = ('0.0.0.0', 80)
    handler = partial(sdmRequestHandler, pd)
    httpd = HTTPServer(server_address, handler)
    while not pd.stopflag:
        httpd.handle_request()
    httpd.server_close()
    cleanup(pd)
    for wl in [ 'wlan0', 'wlan1' ]:
        stopifactive(pd, f"wpa_supplicant@{wl}", True)
    qcopyfile(
        f"/etc/wpa_supplicant/{pd.facname}-wpa-supplicant.conf",
        "/etc/wpa-supplicant/wpa_supplicant.conf",
    )
    logmsg(pd, "Stop systemd-networkd and start dhcpcd to bring the network online")
    tfcmd("systemctl daemon-reload")
    tfcmd("systemctl stop systemd-networkd")
    tfcmd("systemctl start dhcpcd")
    logmsg(pd, "Captive Portal Completed")

if __name__ == "__main__":
    pd = htcontrol()
    parser = argparse.ArgumentParser(prog='cportal')
    parser.add_argument('--apssid', help="SSID name")
    parser.add_argument('--apip', help="IP Address to use")
    parser.add_argument('--logging', help="Script to do boot-time message logging")
    parser.add_argument('--debug', help="Print logged messages on console also", action='store_true')
    parser.add_argument('--facility', help="Facility name to use instead of 'sdm'")
    parser.add_argument('--l10nhandler', help="Full path to script to handle Localization data")
    parser.add_argument('--sdm', help="Invoked from sdm", action='store_true')
    args = parser.parse_args()
    pd.apssid = args.apssid if args.apssid != None else "sdm"
    pd.ip = args.apip if args.apip != None else "10.1.1.1"
    pd.logmsg = "" if args.logging is None else args.logging
    pd.debug = args.debug
    pd.facname = "sdm" if args.facility is None else args.facility
    pd.l10nhandler = "" if args.l10nhandler is None else args.l10nhandler
    pd.sdm = args.sdm
    pd.wlan = 'wlan0'
    for s in gocmd("ip addr show").split("\n"):
        if 'wlan1' in s:
            pd.wlan = 'wlan1'
            pd.dual = True
            break
    # Write the systemd.network files. For single wlan, this is handled in apon/wifion
    if os.path.isfile("/etc/wpa_supplicant/wpa_supplicant.conf"):
        qcopyfile(
            "/etc/wpa_supplicant/wpa_supplicant.conf",
            f"/etc/wpa_supplicant/{pd.facname}-wpa-supplicant.conf.orig",
        )
    if pd.dual:
        with open(f"/etc/systemd/network/11-{pd.facname}-wlan0.network", 'w') as f:
            f.write('[Match]\nName=wlan0\n\n[Network]\nDHCP=yes\n\n')
        with open(f"/etc/systemd/network/12-{pd.facname}-{pd.wlan}-AP.network", 'w') as f:
            f.write("[Match]\n\
Name={}\n\
\n\
[Network]\n\
DHCPServer=yes\n\
Address={}/24\n\
\n\
[DHCPServer]\n\
DNS={}\n".format(pd.wlan, pd.ip, pd.ip))

    with open(f"/etc/wpa_supplicant/{pd.facname}-ap-wpa_supplicant.conf", 'w') as f:
        f.write('country=US\n\
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n\
\n\
### access point ###\n\
network={{\n\
    ssid="{}"\n\
    mode=2\n\
    key_mgmt=NONE\n\
}}\n'.format(pd.apssid))

    runserver(pd)
    exit(0)
